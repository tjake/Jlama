<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.github.tjake</groupId>
    <artifactId>jlama-parent</artifactId>
    <version>${revision}</version>
  </parent>
  <artifactId>jlama-native</artifactId>
  <name>Jlama Native</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <exe.make>make</exe.make>
    <exe.compiler>gcc</exe.compiler>
    <exe.archiver>ld</exe.archiver>
    <nativeLibName>libjlama</nativeLibName>
    <nativeIncludeDir>${project.basedir}/src/main/c</nativeIncludeDir>
    <nativeJarWorkdir>${project.build.directory}/native-jar-work</nativeJarWorkdir>
    <nativeObjsOnlyDir>${project.build.directory}/native-objs-only</nativeObjsOnlyDir>
    <nativeLibOnlyDir>${project.build.directory}/native-lib-only</nativeLibOnlyDir>
    <defaultJarFile>${project.build.directory}/${project.build.finalName}.jar</defaultJarFile>
    <nativeJarFile>${project.build.directory}/${project.build.finalName}-${jni.classifier}.jar</nativeJarFile>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.github.tjake</groupId>
      <artifactId>jlama-core</artifactId>
      <version>${project.version}</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <build>
  <plugins>
    <plugin>
      <artifactId>maven-jar-plugin</artifactId>
      <!-- All other configuration information is in the parent pom -->
      <executions>
        <execution>
          <phase>package</phase>
          <goals>
            <goal>jar</goal>
          </goals>
          <configuration>
            <classifier>${jni.classifier}</classifier>
          </configuration>
        </execution>
        <execution>
          <id>default-jar</id>
          <phase>package</phase>
          <goals>
            <goal>jar</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <!-- Ensure to put maven-antrun-plugin at the end of the plugin list
   so that they are run lastly in the same phase. -->
  <plugin>
    <artifactId>maven-antrun-plugin</artifactId>
    <version>1.8</version>
    <executions>
      <!-- Generate the version properties for all artifacts. -->
      <execution>
        <id>write-version-properties</id>
        <phase>initialize</phase>
        <goals>
          <goal>run</goal>
        </goals>
        <configuration>
          <tasks>
            <taskdef resource="net/sf/antcontrib/antlib.xml" />

            <!-- Get the information about the latest commit -->
            <exec executable="git" outputproperty="gitOutput.lastCommit" resultproperty="gitExitCode.lastCommit" failonerror="false" failifexecutionfails="false">
              <arg value="log" />
              <arg value="-1" />
              <arg value="--format=format:%h %H %cd" />
              <arg value="--date=iso" />
            </exec>
            <propertyregex property="shortCommitHash" input="${gitOutput.lastCommit}" regexp="^([0-9a-f]+) .*$" select="\1" casesensitive="true" defaultValue="0" />
            <propertyregex property="longCommitHash" input="${gitOutput.lastCommit}" regexp="^[0-9a-f]+ ([0-9a-f]{40}) .*$" select="\1" casesensitive="true" defaultValue="0000000000000000000000000000000000000000" />
            <propertyregex property="commitDate" input="${gitOutput.lastCommit}" regexp="^[0-9a-f]+ [0-9a-f]{40} (.*)$" select="\1" casesensitive="true" defaultValue="1970-01-01 00:00:00 +0000" />

            <!-- Get the information abount whether the repository is clean or dirty -->
            <exec executable="git" outputproperty="gitOutput.repoStatus" resultproperty="gitExitCode.repoStatus" failonerror="false" failifexecutionfails="false">
              <arg value="status" />
              <arg value="--porcelain" />
            </exec>
            <if>
              <equals arg2="0" arg1="${gitExitCode.repoStatus}" />
              <then>
                <if>
                  <equals arg2="" arg1="${gitOutput.repoStatus}" />
                  <then>
                    <property name="repoStatus" value="clean" />
                  </then>
                  <else>
                    <property name="repoStatus" value="dirty" />
                  </else>
                </if>
              </then>
              <else>
                <property name="repoStatus" value="unknown" />
              </else>
            </if>

            <!-- Print the obtained commit information. -->
            <echo>Current commit: ${shortCommitHash} on ${commitDate}</echo>

            <!-- Generate the .properties file. -->
            <!--
            <property name="metaInfDir" value="${project.basedir}/src/main/resources/META-INF" />
            -->
            <property name="metaInfDir" value="${project.build.outputDirectory}/META-INF" />
            <property name="versionPropFile" value="${metaInfDir}/${project.groupId}.versions.properties" />
            <mkdir dir="${metaInfDir}" />
            <delete file="${versionPropFile}" quiet="true" />

            <propertyfile file="${versionPropFile}" comment="Generated by jlama/pom.xml">
              <entry key="${project.artifactId}.version" value="${project.version}" />
              <entry key="${project.artifactId}.buildDate" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss Z" />
              <entry key="${project.artifactId}.commitDate" value="${commitDate}" />
              <entry key="${project.artifactId}.shortCommitHash" value="${shortCommitHash}" />
              <entry key="${project.artifactId}.longCommitHash" value="${longCommitHash}" />
              <entry key="${project.artifactId}.repoStatus" value="${repoStatus}" />
            </propertyfile>
          </tasks>
        </configuration>
      </execution>
    </executions>
    <dependencies>
      <dependency>
        <groupId>org.apache.ant</groupId>
        <artifactId>ant</artifactId>
        <version>1.10.11</version>
      </dependency>
      <dependency>
        <groupId>org.apache.ant</groupId>
        <artifactId>ant-launcher</artifactId>
        <version>1.9.7</version>
      </dependency>
      <dependency>
        <groupId>ant-contrib</groupId>
        <artifactId>ant-contrib</artifactId>
        <version>1.0b3</version>
        <exclusions>
          <exclusion>
            <groupId>ant</groupId>
            <artifactId>ant</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
    </dependencies>
  </plugin>
</plugins>
    </build>
<profiles>
<profile>
  <id>linux</id>
  <activation>
    <os>
      <family>linux</family>
    </os>
  </activation>
  <properties>
    <jni.platform>linux</jni.platform>
  </properties>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <!-- Build the additional JAR that contains the native library. -->
          <execution>
            <id>native-jar</id>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <copy todir="${nativeJarWorkdir}">
                  <zipfileset src="${defaultJarFile}" />
                </copy>
                <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                  <zipfileset dir="${nativeLibOnlyDir}" />
                  <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/lib/\1" />
                </copy>
                <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                  <zipfileset dir="${nativeIncludeDir}" />
                  <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)\.h$" to="META-INF/native/include/\1.h" />
                </copy>
                <jar destfile="${nativeJarFile}" manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" basedir="${nativeJarWorkdir}" index="true" excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" />
                <attachartifact file="${nativeJarFile}" classifier="${jni.classifier}" type="jar" />
              </target>
            </configuration>
          </execution>
          <!-- invoke the make file to build a static library -->
          <execution>
            <id>build-native-lib</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                  <env key="CC" value="${exe.compiler}" />
                  <env key="AR" value="${exe.archiver}" />
                  <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                  <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                  <env key="JNI_PLATFORM" value="${jni.platform}" />
                  <env key="CFLAGS" value="-O3 -mavx2 -march=native -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable" />
                  <env key="LDFLAGS" value="-shared" />
                  <env key="LIB_NAME" value="${nativeLibName}" />
                  <env KEY="LIB_EXT"  value="so" />
                </exec>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  </profile>
  <profile>
    <id>windows</id>
    <activation>
      <os>
        <family>windows</family>
      </os>
    </activation>
    <properties>
      <jni.platform>windows</jni.platform>
    </properties>
    <build>
      <plugins>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <executions>
            <!-- Build the additional JAR that contains the native library. -->
            <execution>
              <id>native-jar</id>
              <phase>package</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <copy todir="${nativeJarWorkdir}">
                    <zipfileset src="${defaultJarFile}" />
                  </copy>
                  <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                    <zipfileset dir="${nativeLibOnlyDir}" />
                    <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/lib/\1" />
                  </copy>
                  <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                    <zipfileset dir="${nativeIncludeDir}" />
                    <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)\.h$" to="META-INF/native/include/\1.h" />
                  </copy>
                  <jar destfile="${nativeJarFile}" manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" basedir="${nativeJarWorkdir}" index="true" excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" />
                  <attachartifact file="${nativeJarFile}" classifier="${jni.classifier}" type="jar" />
                </target>
              </configuration>
            </execution>
            <!-- invoke the make file to build a static library -->
            <execution>
              <id>build-native-lib</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                    <env key="CC" value="${exe.compiler}" />
                    <env key="AR" value="${exe.archiver}" />
                    <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                    <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                    <env key="JNI_PLATFORM" value="${jni.platform}" />
                    <env key="CFLAGS" value="-O3 -mavx2 -march=native -Werror -Wno-attributes -fPIC -ffreestanding -fno-stack-check -fno-stack-protector -mno-stack-arg-probe -fno-omit-frame-pointer -Wunused-variable" />
                    <env key="LDFLAGS" value="-shared" />
                    <env key="LIB_NAME" value="${nativeLibName}" />
                    <env KEY="LIB_EXT"  value="dll" />
                  </exec>
                </target>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
  <profile>
    <id>mac-m1</id>
    <activation>
      <os>
        <family>mac</family>
        <arch>aarch64</arch>
      </os>
    </activation>
    <properties>
      <exe.compiler>clang</exe.compiler>
      <jni.platform>darwin</jni.platform>
      <!-- use aarch_64 as this is also what os.detected.arch will use on an aarch64 system -->
      <jni.classifier>${os.detected.name}-aarch_64</jni.classifier>
    </properties>
    <build>
      <plugins>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <executions>
            <!-- Build the additional JAR that contains the native library. -->
            <execution>
              <id>native-jar</id>
              <phase>package</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <copy todir="${nativeJarWorkdir}">
                    <zipfileset src="${defaultJarFile}" />
                  </copy>
                  <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                    <zipfileset dir="${nativeLibOnlyDir}" />
                    <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/lib/\1" />
                  </copy>
                  <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                    <zipfileset dir="${nativeIncludeDir}" />
                    <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+).h$" to="META-INF/native/include/\1.h" />
                  </copy>
                  <jar destfile="${nativeJarFile}" manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" basedir="${nativeJarWorkdir}" index="true" excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" />
                  <attachartifact file="${nativeJarFile}" classifier="${jni.classifier}" type="jar" />
                </target>
              </configuration>
            </execution>
            <!-- invoke the make file to build a static library -->
            <execution>
              <id>build-native-lib</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                    <env key="CC" value="${exe.compiler}" />
                    <env key="AR" value="${exe.archiver}" />
                    <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                    <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                    <env key="JNI_PLATFORM" value="${jni.platform}" />
                    <env key="CFLAGS" value="-target arm64-apple-macos11 -Rpass-analysis=loop-vectorize -Rpass=loop-vectorize -Rpass-missed=loop-vectorize -O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fno-common" />
                    <env key="LDFLAGS" value="-syslibroot `xcrun -sdk macosx --show-sdk-path` -lSystem -dylib -arch arm64" />
                    <env key="LIB_NAME" value="${nativeLibName}" />
                    <env key="LIB_EXT" value="dylib" />
                    <env key="MACOSX_DEPLOYMENT_TARGET" value="11.0" />
                  </exec>
                </target>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
  <profile>
    <id>mac-x86</id>
    <activation>
      <os>
        <family>mac</family>
        <arch>x86_64</arch>
      </os>
    </activation>
    <properties>
      <exe.compiler>clang</exe.compiler>
      <jni.platform>darwin</jni.platform>
      <jni.classifier>${os.detected.name}-x86_64</jni.classifier>
    </properties>
    <build>
      <plugins>
        <plugin>
          <artifactId>maven-antrun-plugin</artifactId>
          <executions>
            <!-- Build the additional JAR that contains the native library. -->
            <execution>
              <id>native-jar</id>
              <phase>package</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <copy todir="${nativeJarWorkdir}">
                    <zipfileset src="${defaultJarFile}" />
                  </copy>
                  <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                    <zipfileset dir="${nativeLibOnlyDir}" />
                    <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/lib/\1" />
                  </copy>
                  <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                    <zipfileset dir="${nativeIncludeDir}" />
                    <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+).h$" to="META-INF/native/include/\1.h" />
                  </copy>
                  <jar destfile="${nativeJarFile}" manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" basedir="${nativeJarWorkdir}" index="true" excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" />
                  <attachartifact file="${nativeJarFile}" classifier="${jni.classifier}" type="jar" />
                </target>
              </configuration>
            </execution>
            <!-- invoke the make file to build a static library -->
            <execution>
              <id>build-native-lib</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <target>
                  <exec executable="${exe.make}" failonerror="true" resolveexecutable="true">
                    <env key="CC" value="${exe.compiler}" />
                    <env key="AR" value="${exe.archiver}" />
                    <env key="LIB_DIR" value="${nativeLibOnlyDir}" />
                    <env key="OBJ_DIR" value="${nativeObjsOnlyDir}" />
                    <env key="JNI_PLATFORM" value="${jni.platform}" />
                    <env key="CFLAGS" value="-target x86_64-apple-macos10.12 -mavx2 -mfma -O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fno-common" />
                    <env key="LDFLAGS" value="-syslibroot `xcrun -sdk macosx --show-sdk-path` -lSystem -dylib -arch x86_64" />
                    <env key="LIB_NAME" value="${nativeLibName}" />
                    <env key="LIB_EXT" value="dylib" />
                    <env key="MACOSX_DEPLOYMENT_TARGET" value="10.12" />
                  </exec>
                </target>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
  </profile>
</profiles>
</project>